import { axios } from '../../lib/axios';
import { getApiURL } from '../../lib/axiosConstants';
import { ModerationReport, ModerationReportRequest, ReportCategory } from '../../types/moderation';
import { useMutation } from './setup';
import { ErrorLogger } from '../../DebugLog';

/**
 * Sends a POST request to the server to create a new moderation report.
 */
export const useCreateReportMutation = () => {
  return useMutation(async (
    {report, category, comment}:
    {report: ModerationReport, category: ReportCategory, comment?: string}
  ) => {
    const requestBody = createModerationReportRequestBody(report, category, comment);

    if (!requestBody) {
      return Promise.reject('Invalid report data!');
    } else {
      return await axios().post<any>('/report/create', requestBody, {
        baseURL: getApiURL(),
      });
    }
  });
};

/**
 * Creates a POST request body from a ModerationReport object.
 */
function createModerationReportRequestBody(
  report: ModerationReport,
  category: ReportCategory,
  comment?: string,
): ModerationReportRequest | undefined {
  let reportPayload: ModerationReportRequest | undefined;

  switch (report.type) {
    case 'MESSAGE': {
      const turn = report.turn;

      reportPayload = {
        type: report.type,
        turn_create_time: Date.parse(turn.create_time) / 1000,
        turn_key: {
          turn_id: turn.turn_key.turn_id,
          chat_id: turn.turn_key.chat_id,
        },
        category: category,
        comments: comment,
      };

      break;
    }
    case 'ROOM': {
      const turn = report.turn;

      if (turn) {
        reportPayload = {
          type: report.type,
          turn_create_time: Date.parse(turn.create_time) / 1000,
          turn_key: {
            turn_id: turn.turn_key.turn_id,
            chat_id: turn.turn_key.chat_id,
          },
          category: category,
          comments: comment,
        };
      } else {
        ErrorLogger.logError('Trying to report a group chat without a turn', { extra: { report }});
      }

      break;
    }
    case 'CHARACTER': {
      const character = report.character;

      reportPayload = {
        type: report.type,
        reported_resource_id: character.external_id,
        category: category,
        comments: comment,
      };

      break;
    }
    case 'VOICE': {
      const voiceId = report.voice_id;

      reportPayload = {
        type: report.type,
        reported_resource_id: voiceId,
        category: category,
        comments: comment,
      };

      break;
    }
    default:
      ErrorLogger.logError('Invalid report type', { extra: { report }});
      break;
  }

  return reportPayload;
}
