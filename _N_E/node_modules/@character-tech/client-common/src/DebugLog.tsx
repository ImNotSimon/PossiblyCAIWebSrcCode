export enum DebugEventType {
  log = 'log',
  net = 'net',
  error = 'err',
  warn = 'warn',
  special = 'special',
}

interface DebugEvent {
  event: string;
  type: DebugEventType;
  time: number;
  additionalData?: any;
}

const DebugEvents: DebugEvent[] = [];

const MAX_DEBUG_EVENTS = 1000;
let EVENT_IDX = 0;

const AddEvent = (event: DebugEvent) => {
  DebugEvents[EVENT_IDX] = event;
  EVENT_IDX++;
  if (EVENT_IDX > MAX_DEBUG_EVENTS) {
    EVENT_IDX = 0;
  }
};

export const GetDebugEvents = () => {
  return [
    ...DebugEvents.slice(EVENT_IDX, DebugEvents.length),
    ...DebugEvents.slice(0, EVENT_IDX),
  ];
};

export const ClearDebugLog = () => {
  DebugEvents.splice(0, DebugEvents.length);
  EVENT_IDX = 0;
};

export const LogDebugEvent = (
  event: string,
  type: DebugEventType = DebugEventType.log,
  ...optionalParams: any[]
) => {
  switch (type) {
    case DebugEventType.error:
      console.error(event, optionalParams);
      break;
    case DebugEventType.warn:
      console.warn(event, optionalParams);
      break;
    case DebugEventType.log:
    case DebugEventType.special:
      console.log(event);
      break;
  }

  AddEvent({
    event,
    type,
    time: new Date().getTime(),
    additionalData: optionalParams,
  });
};

// helper for errors
export const LogDebugError = (event: string, ...optionalParams: any[]) => {
  console.error(event, optionalParams);

  AddEvent({
    event,
    type: DebugEventType.error,
    time: new Date().getTime(),
    additionalData: optionalParams,
  });
};

// helper for warnings
export const LogDebugWarning = (event: string, ...optionalParams: any[]) => {
  console.warn(event, optionalParams);

  AddEvent({
    event,
    type: DebugEventType.warn,
    time: new Date().getTime(),
    additionalData: optionalParams,
  });
};

export type LogErrorImpl = (
  message: string,
  data?: { error?: any; extra?: Record<string, unknown> },
) => void;

export const ErrorLogger: { logError: LogErrorImpl } = {
  logError: () => {},
};

export const setErrorLogger = (logger?: LogErrorImpl) => {
  ErrorLogger.logError = logger ? logger : () => {};
};
