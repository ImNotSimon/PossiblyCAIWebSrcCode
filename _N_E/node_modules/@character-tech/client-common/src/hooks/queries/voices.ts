import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { axios } from '../../lib/axios';
import { voiceQueries } from './baseQueries';
import { getMultimodalServerURL } from '../../lib/axiosConstants';

export const useFeaturedVoices = () => {
  const query = useQuery({
    queryKey: voiceQueries.featuredVoices.keys(),
    queryFn: voiceQueries.featuredVoices.queryFn,
    staleTime: 2 * 60 * 60 * 1000, // cache voice preview urls for 2 hours
  });

  return {
    ...query,
    voices: query.data?.data.voices,
  };
};

export const useUserVoices = () => {
  const query = useQuery({
    queryKey: voiceQueries.userVoices.keys(),
    queryFn: voiceQueries.userVoices.queryFn,
    staleTime: 2 * 60 * 60 * 1000, // cache voice preview urls for 2 hours
  });

  return {
    ...query,
    voices: query.data?.data.voices,
  };
};

export const useGetVoice = (
  voiceId: string | undefined | null,
  useSearch?: boolean,
) => {
  const query = useQuery({
    queryKey: voiceQueries.singleVoice.keys(voiceId, useSearch),
    queryFn: () => voiceQueries.singleVoice.queryFn(voiceId, useSearch),
    staleTime: Infinity,
    enabled: !!voiceId,
  });

  return {
    ...query,
    voice: query.data?.data?.voice,
  };
};

export const useDeleteVoice = () => {
  const queryClient = useQueryClient();

  const mutation = useMutation(
    async ({ voiceId, userId }: { voiceId: string; userId: number }) => {
      return fetch(`${getMultimodalServerURL()}/v1/voices/${voiceId}`, {
        method: 'DELETE',
        headers: {
          'X-User-Id': String(userId),
        },
      });
    },
    {
      onSuccess: () => {
        queryClient.invalidateQueries(voiceQueries.userVoices.keys());
      },
    },
  );
  return mutation;
};

export const useSearchVoices = (searchString: string, disabled?: boolean) => {
  const query = useQuery({
    queryKey: voiceQueries.searchVoice.keys(searchString),
    queryFn: () => voiceQueries.searchVoice.queryFn(searchString),
    enabled: !!searchString && !disabled,
    staleTime: Infinity,
  });

  return {
    ...query,
    searchResults: query.data?.data.voices,
  };
};

export const useAnnotateVoice = () => {
  const mutation = useMutation(
    async ({
      voiceId,
      rating,
      text,
      userId,
    }: {
      voiceId?: string;
      rating?: string;
      text?: string;
      userId?: number;
    }) => {
      if (
        !voiceId ||
        !userId ||
        (rating?.trim() === '' && text?.trim() === '')
      ) {
        throw new Error('Missing required annotation fields');
      }

      return await axios().post<{}>(
        `${getMultimodalServerURL()}/v1/voices/annotate`,
        {
          voiceId,
          rating,
          textFeedback: text,
        },
        {
          headers: {
            'X-User-Id': String(userId),
          },
        },
      );
    },
  );

  return mutation;
};
