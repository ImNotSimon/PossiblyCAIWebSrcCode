import { SearchedUser } from '../types/app-api';
import { UserLocation } from '../types/moderation';
import { EEA_COUNTRY_CODES, IP_API_URL, UK_COUNTRY_CODE } from './constants';
import { getUserLocationData, saveUserLocationData } from './storageUtils';

export const createBioFromCharacterInfo = (creator: SearchedUser) => {
  if (!creator.character_info) {
    return undefined;
  }
  const { num_characters, top_1_char, top_2_char } = creator.character_info;
  const { character_name: top_1_name } = top_1_char;
  const { character_name: top_2_name } = top_2_char;

  if (num_characters === 0) {
    return undefined;
  } else if (num_characters === 1) {
    return `Created ${top_1_name ? top_1_name : '1 public character'}`;
  } else if (num_characters === 2) {
    if (top_1_name && top_2_name) {
      return `Created ${top_1_name} and ${top_2_name}`;
    } else if (top_1_name) {
      return `Created ${top_1_name} and 1 other`;
    }
  } else if (num_characters > 2) {
    if (top_1_name && top_2_name) {
      const num_others = num_characters - 2;
      return `Created ${top_1_name}, ${top_2_name}, and ${num_others} other${
        num_others > 1 ? 's' : ''
      }`;
    } else if (top_1_name) {
      const num_others = num_characters - 1;
      return `Created ${top_1_name} and ${num_others} others`;
    }
  }

  return `Created ${num_characters} public characters`;
};

/**
 * Check if user is from EU, EEA, UK based on IP.
 */
export const fetchUserLocation = async(): Promise<UserLocation> => {
  const cachedLocation = getUserLocationData();

  if (cachedLocation) return cachedLocation;
    
  try {
    const url = `${ IP_API_URL }/json`;
    const response = await fetch(url);
    const json = await response.json();
    const inEU = json.in_eu === true;
    const inEEA = EEA_COUNTRY_CODES.includes(json.country_code);
    const inUK = json.country_code === UK_COUNTRY_CODE;

    saveUserLocationData({inEEA, inEU, inUK}, 30 * 24 * 60 * 60);

    return {inEEA, inEU, inUK};
  } catch(e) {
    // Always assume in EU, UR, EEA if the call fails. But set a much lower ttl.
    saveUserLocationData({inEEA: true, inEU: true, inUK: true}, 60 * 60);

    return {inEEA: true, inEU: true, inUK: true};
  }
}
