export var DebugEventType;
(function (DebugEventType) {
    DebugEventType["log"] = "log";
    DebugEventType["net"] = "net";
    DebugEventType["error"] = "err";
    DebugEventType["warn"] = "warn";
    DebugEventType["special"] = "special";
})(DebugEventType || (DebugEventType = {}));
const DebugEvents = [];
const MAX_DEBUG_EVENTS = 1000;
let EVENT_IDX = 0;
const AddEvent = (event) => {
    DebugEvents[EVENT_IDX] = event;
    EVENT_IDX++;
    if (EVENT_IDX > MAX_DEBUG_EVENTS) {
        EVENT_IDX = 0;
    }
};
export const GetDebugEvents = () => {
    return [
        ...DebugEvents.slice(EVENT_IDX, DebugEvents.length),
        ...DebugEvents.slice(0, EVENT_IDX),
    ];
};
export const ClearDebugLog = () => {
    DebugEvents.splice(0, DebugEvents.length);
    EVENT_IDX = 0;
};
export const LogDebugEvent = (event, type = DebugEventType.log, ...optionalParams) => {
    switch (type) {
        case DebugEventType.error:
            console.error(event, optionalParams);
            break;
        case DebugEventType.warn:
            console.warn(event, optionalParams);
            break;
        case DebugEventType.log:
        case DebugEventType.special:
            console.log(event);
            break;
    }
    AddEvent({
        event,
        type,
        time: new Date().getTime(),
        additionalData: optionalParams,
    });
};
// helper for errors
export const LogDebugError = (event, ...optionalParams) => {
    console.error(event, optionalParams);
    AddEvent({
        event,
        type: DebugEventType.error,
        time: new Date().getTime(),
        additionalData: optionalParams,
    });
};
// helper for warnings
export const LogDebugWarning = (event, ...optionalParams) => {
    console.warn(event, optionalParams);
    AddEvent({
        event,
        type: DebugEventType.warn,
        time: new Date().getTime(),
        additionalData: optionalParams,
    });
};
export const ErrorLogger = {
    logError: () => { },
};
export const setErrorLogger = (logger) => {
    ErrorLogger.logError = logger ? logger : () => { };
};
//# sourceMappingURL=DebugLog.js.map