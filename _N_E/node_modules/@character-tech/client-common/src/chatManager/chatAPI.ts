import {
  Character,
  ChatHistoryResponse,
  ChatMessageHistoryResponse,
} from '../types/app-api';
import { DUMMY_MSG } from './chatManagerTypes';
import { axios } from '../lib/axios';
import { LOADING_MSG } from './ChatInstanceFetchAsync';

export const ChatAPI = {
  fetchChatMessageHistory: async (
    external_id: string,
    pageNumField: number | undefined,
  ) => {
    return axios()
      .get<ChatMessageHistoryResponse>('/chat/history/msgs/user/', {
        params: { history_external_id: external_id, page_num: pageNumField },
      })
      .catch(err => {
        return Promise.reject(err);
      });
  },
  fetchChatCreateHistory: async (character_external_id: string | undefined) => {
    return axios()
      .post<ChatHistoryResponse>('/chat/history/create/', {
        character_external_id,
      })
      .catch(err => {
        return Promise.reject(err);
      });
  },
  fetchChatContinuedHistory: async (
    character_external_id: string | null | undefined,
    history_external_id: string | null | undefined,
  ) => {
    return axios()
      .post<ChatHistoryResponse>('/chat/history/continue/', {
        character_external_id,
        history_external_id,
      })
      .catch(err => {
        return Promise.reject(err);
      });
  },
  fetchCharacterInfo: async (external_id: string | null | undefined) => {
    return axios()
      .post<{
        character: Character;
        status: string;
      }>('/chat/character/info/', {
        external_id,
      })
      .catch(err => {
        return Promise.reject(err);
      });
  },
  fetchCharacterInfoCached: async (external_id: string) => {
    return await axios()
      .post<{
        character: Character;
        status: string;
      }>('/chat/character/info/', { external_id })
      .catch(err => {
        return Promise.reject(err);
      });
  },
  abortChatMessage: async (
    historyId: string,
    uuid: string,
    numLetters: number,
  ) => {
    return await axios()
      .post('/chat/history/msgs/cancel/', {
        history_id: historyId,
        msg_uuid: uuid,
        num_letters: numLetters,
      })
      .catch(err => {
        return Promise.reject(err);
      });
  },
  deleteMessages: async (historyId: string, uuids: string[]) => {
    // logEvent(
    //   EventNames.Api.DeleteChatMessages,
    //   null,
    //   { numMessages: uuids.length },
    //   LogEventHowOften.Always,
    // );

    const filterdUUIDs = uuids.filter(
      uuid => uuid !== LOADING_MSG && uuid !== DUMMY_MSG,
    );

    const response = await axios()
      .post('chat/history/msgs/delete/', {
        history_id: historyId,
        uuids_to_delete: filterdUUIDs,
      })
      .catch(err => Promise.reject(err));

    return response.data.status === 'OK';
  },
};
