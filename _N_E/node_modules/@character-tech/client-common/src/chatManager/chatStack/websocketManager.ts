import { ErrorLogger } from '../../DebugLog';
import { ChatEventEnum } from '../chatManagerTypes';
import { WebSocketMessageEvent } from '../chatServiceTypes';
import { CentrifugeManager } from './centrifugeManager';
import { NativeWebsocketManager } from './nativeWebsocketManager';

export let appChatSocket: AppChatSocket | undefined;
export let centrifugeChatSocket: AppChatSocket;

export const setupAppChatSocket = (
  chatEventCallback: (eventType: ChatEventEnum, payload?: any) => void,
  userId?: number,
  useCentrifuge?: boolean,
  useCentrifugeByDefault?: boolean,
) => {
  appChatSocket?.disconnectWebsocket();

  // We only need an app chat socket if we're not using centrifuge for everything
  appChatSocket = useCentrifugeByDefault
    ? undefined
    : new NativeWebsocketManager(chatEventCallback);

  if (useCentrifuge || useCentrifugeByDefault) {
    centrifugeChatSocket?.disconnectWebsocket();
    centrifugeChatSocket = new CentrifugeManager(
      chatEventCallback,
      !!useCentrifugeByDefault,
      userId,
    );
  }
};

export const reconnectAppChatSocket = () => {
  appChatSocket?.reconnectWebsocket();
  centrifugeChatSocket?.reconnectWebsocket();
};

export const getChatSocket = () => {
  const chatSocket = appChatSocket ?? centrifugeChatSocket;
  if (!chatSocket) {
    ErrorLogger.logError(
      'Trying to use chat socket before it has been initialized',
    );
    throw new Error('Chat socket uninitialized');
  }
  return chatSocket;
};

export interface AppChatSocket {
  disconnectWebsocket: () => void;
  reconnectWebsocket: () => void;
  send: (payload: Record<string, any>, chatId?: string) => void;
  subscribeToRoom: (chatId: string, instanceId: string) => void;
  unsubscribeFromRoom: (chatId: string) => void;
}

export interface SubscriberCallbacks {
  onMessageCallback: (payload: WebSocketMessageEvent) => void;
  onErrorCallback: () => void;
}
