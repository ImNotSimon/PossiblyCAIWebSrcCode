import { CharacterDetailed } from '../../types/app-api';
import { useMutation, useQuery, useQueryClient } from './setup';
import { useMemo } from 'react';
import { axios } from '../../lib/axios';
import { CharacterVisibility } from '../../types/types';
import { v4 as uuidv4 } from 'uuid';

export const PERSONA_NAME_MIN_LIMIT = 3;
export const PERSONA_NAME_MAX_LIMIT = 20;
export const PERSONA_DEFINITION_LIMIT = 728;

export const PERSONA_NAME_MAX_LIMIT_KEY = 'failed-persona-name-too-long';
export const PERSONA_NAME_MIN_LIMIT_KEY = 'failed-persona-name-too-short';

export const PERSONA_LIMIT_ERROR_KEY = 'failed-persona-too-long';

export const personaKeys = {
  persona: (external_id: string) => ['persona', external_id] as const,
  personas: () => ['personas'],
};

export const usePersona = (external_id?: string) => {
  const query = useQuery({
    queryKey: personaKeys.persona(external_id ?? ''),
    queryFn: () =>
      axios().get<{ persona: CharacterDetailed }>(
        `/chat/persona/?id=${external_id}`,
      ),
    enabled: !!external_id,
    staleTime: Infinity,
  });

  const persona = useMemo(() => query.data?.data?.persona, [query.data]);

  return {
    ...query,
    persona,
  };
};

export type Scope = 'user' | '';

export const useUserPersonas = (forceRefresh?: boolean, disabled?: boolean) => {
  const query = useQuery({
    queryKey: personaKeys.personas(),
    queryFn: () =>
      axios().get<{ personas: CharacterDetailed[] }>(
        `/chat/personas/?force_refresh=${forceRefresh ? 1 : 0}`,
      ),
    staleTime: Infinity,
    enabled: !disabled,
  });
  const personas = useMemo(() => {
    return query.data?.data?.personas;
  }, [query.data]);
  return {
    ...query,
    personas,
  };
};

export const useCreatePersona = () => {
  const queryClient = useQueryClient();
  const mutation = useMutation(
    async (data: {
      definition: string;
      name?: string;
      avatar_rel_path?: string;
      visibility?: CharacterVisibility;
      title?: string;
      greeting?: string;
      description?: string;
    }) => {
      if (data.definition.length > PERSONA_DEFINITION_LIMIT) {
        throw new Error(PERSONA_LIMIT_ERROR_KEY);
      }
      if (
        data.name !== undefined &&
        data.name.length > PERSONA_NAME_MAX_LIMIT
      ) {
        throw new Error(PERSONA_NAME_MAX_LIMIT_KEY);
      }
      if (
        data.name !== undefined &&
        data.name.length < PERSONA_NAME_MIN_LIMIT
      ) {
        throw new Error(PERSONA_NAME_MIN_LIMIT_KEY);
      }

      const response = await axios().post<{
        persona: CharacterDetailed;
      }>('/chat/persona/create/', {
        title: data.title ?? data.name ?? 'My Persona',
        name: data.name ?? 'My Persona',
        identifier: `id:${uuidv4()}`,
        categories: [],
        visibility: data.visibility ?? CharacterVisibility.PRIVATE,
        copyable: false,
        description: data.description ?? 'This is my persona.',
        greeting: data.greeting ?? 'Hello! This is my persona',
        definition: data.definition,
        avatar_rel_path: data.avatar_rel_path ?? '',
        img_gen_enabled: false,
        base_img_prompt: '',
        avatar_file_name: '',
        voice_id: '',
        strip_img_prompt_from_msg: false,
      });
      return response.data;
    },
    {
      onSuccess: () => {
        queryClient.invalidateQueries(personaKeys.personas());
      },
    },
  );
  return mutation;
};

export const useUpdatePersona = (persona?: CharacterDetailed) => {
  const queryClient = useQueryClient();
  const mutation = useMutation(
    async (data: {
      external_id: string;
      changes: Partial<CharacterDetailed>;
    }) => {
      if ((data.changes.definition?.length ?? 0) > PERSONA_DEFINITION_LIMIT) {
        throw new Error(PERSONA_LIMIT_ERROR_KEY);
      }
      if (
        data.changes.name !== undefined &&
        data.changes.name.length > PERSONA_NAME_MAX_LIMIT
      ) {
        throw new Error(PERSONA_NAME_MAX_LIMIT_KEY);
      }
      if (
        data.changes.name !== undefined &&
        (data.changes.name ?? '').length < PERSONA_NAME_MIN_LIMIT
      ) {
        throw new Error(PERSONA_NAME_MIN_LIMIT_KEY);
      }

      // we need to fetch the original persona to get the full character schema because that's
      // how the original create/update character endpoints work
      let fullPersona = persona;
      if (!fullPersona) {
        const personaResponse = await axios().get<{
          persona: CharacterDetailed;
        }>(`/chat/persona/?id=${data.external_id}`);
        const personaData = personaResponse.data?.persona;
        if (!personaData || personaResponse?.status !== 200) {
          return;
        }
        fullPersona = personaData;
      }

      const response = await axios().post<{
        persona: CharacterDetailed;
      }>('/chat/persona/update/', { ...fullPersona, ...data.changes });
      return { ...response.data, isDelete: !!data.changes.archived };
    },
    {
      onSuccess: result => {
        if (result?.persona) {
          queryClient.invalidateQueries(personaKeys.personas());
          if (!result.isDelete) {
            queryClient.invalidateQueries(
              personaKeys.persona(result?.persona.external_id),
            );
          }
        }
      },
    },
  );
  return mutation;
};
