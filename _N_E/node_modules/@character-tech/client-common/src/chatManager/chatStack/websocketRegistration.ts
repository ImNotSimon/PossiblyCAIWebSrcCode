import { WebSocketMessageEvent } from '../chatServiceTypes';

interface SubscriberCallbacks {
  onMessageCallback: (payload: WebSocketMessageEvent) => void;
  onErrorCallback: () => void;
  onSocketConnected?: () => void;
}

class WebsocketRegistration {
  subscribers: Record<string, SubscriberCallbacks> = {};

  subscribe(
    instanceId: string,
    onMessageCallback: (payload: WebSocketMessageEvent) => void,
    onErrorCallback: () => void,
    onSocketConnected?: () => void,
  ) {
    this.subscribers[instanceId] = {
      onMessageCallback,
      onErrorCallback,
      onSocketConnected,
    };
  }

  unsubscribe(instanceId: string) {
    delete this.subscribers[instanceId];
  }

  publish(data: any, instanceId: string) {
    this.subscribers[instanceId]?.onMessageCallback(data);
  }

  raiseError(subscriberId: string) {
    this.subscribers[subscriberId]?.onErrorCallback();
  }

  socketConnected(instanceId: string) {
    this.subscribers[instanceId]?.onSocketConnected?.();
  }
}

export const websocketRegistration = new WebsocketRegistration();
