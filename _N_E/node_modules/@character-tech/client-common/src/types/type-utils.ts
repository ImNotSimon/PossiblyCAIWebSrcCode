import { Chat } from "../chatManager/chatServiceTypes";
import { Character, CharacterHistory } from "./app-api";

// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const isNeoChat = (obj: any): obj is Chat => {
  return obj && typeof obj.chat_id === "string";
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const isLegacyChat = (obj: any): obj is Character => {
  return obj && typeof obj.external_id === "string";
};

export const isCharacterHistory = (obj: any): obj is CharacterHistory => {
  return obj && typeof obj.external_id === "string";
};

export const getLastInteractionTime = (c: Character | Chat): number => {
  const date = isNeoChat(c)
    ? new Date(c.create_time)
    : isLegacyChat(c) && c.max_last_interaction
    ? new Date(c.max_last_interaction)
    : undefined;

  return date ? date.valueOf() : 0;
};

export const getHistoryLastInteractionTime = (c: Chat | CharacterHistory) => {
  const date = c.last_interaction;
  return date ? new Date(date).valueOf() : 0;
};

export const dedupedRecentChats = (combined: (Chat | Character)[]) => {
  const renderedIds: string[] = [];
  const recentChatsToRender: (Chat | Character)[] = [];
  for (const c of combined) {
    const id = isNeoChat(c) ? c.character_id : c.external_id;
    if (!renderedIds.includes(id)) {
      recentChatsToRender.push(c);
      renderedIds.push(id);
    }
  }

  return recentChatsToRender;
};
