import { neoAPI } from '../../chatManager/neoAPI';
import { axios } from '../../lib/axios';
import { getApiURL, getMultimodalServerURL } from '../../lib/axiosConstants';
import {
  CategoryResponse,
  Character,
  CharacterDetailed,
  CharactersByCategoryResponse,
  Participant,
  UserSettings,
  Voice,
} from '../../types/app-api';

export const characterQueries = {
  character: {
    keys: ['character'] as const,
  },
  info: {
    keys: (externalId: string) =>
      [...characterQueries.character.keys, 'info', externalId] as const,
    queryFn: (externalId?: string) =>
      axios().post<{
        character: Character;
        status: string;
      }>('/chat/character/info/', { external_id: externalId }),
  },
  detailed: {
    keys: (externalId: string) =>
      [...characterQueries.character.keys, 'detailed', externalId] as const,
    queryFn: (externalId?: string) =>
      axios().post<{ character: CharacterDetailed }>('/chat/character/', {
        external_id: externalId,
      }),
  },
  recommended: {
    keys: (externalId: string) =>
      [...characterQueries.character.keys, 'recommended', externalId] as const,
    queryFn: (character_id?: string) =>
      axios().get<{ characters: Character[] }>(
        `${getApiURL()}recommendation/v1/character/${character_id}`,
      ),
  },
};

export const discoveryQueries = {
  characters: {
    keys: ['characters'] as const,
  },
  featured: {
    keys: () => [...discoveryQueries.characters.keys, 'featured'] as const,
    queryFn: () =>
      axios().get<{ characters: Character[] }>(
        `${getApiURL()}recommendation/v1/featured`,
      ),
  },
  recent: {
    keys: (neoEnabled: boolean) =>
      [...discoveryQueries.characters.keys, 'recent', neoEnabled] as const,
    queryFn: (neoEnabled: boolean) =>
      neoAPI.fetchMergedRecentChats(neoEnabled, true),
  },
  public: {
    keys: () => [...discoveryQueries.characters.keys, 'public'] as const,
    queryFn: () =>
      axios().get<{ characters: Character[] }>('/chat/characters/public/'),
  },
  trending: {
    keys: () => [...discoveryQueries.characters.keys, 'trending'] as const,
    queryFn: () =>
      axios().get<{ characters: Character[] }>(
        `${getApiURL()}recommendation/v1/trending`,
      ),
  },
  recommended: {
    keys: () => [...discoveryQueries.characters.keys, 'recommended'] as const,
    queryFn: async () =>
      axios().get<{ characters: Character[] }>(
        `${getApiURL()}recommendation/v1/user`,
      ),
  },
  curated: {
    keys: () => [...discoveryQueries.characters.keys, 'curated'] as const,
    queryFn: () =>
      axios().get<CharactersByCategoryResponse>(
        '/chat/curated_categories/characters/',
      ),
  },
  categories: {
    keys: () => [...discoveryQueries.characters.keys, 'categories'] as const,
    queryFn: () => axios().get<CategoryResponse>('/chat/character/categories/'),
  },
};

export const userQueries = {
  user: {
    keys: ['user'] as const,
  },
  settings: {
    keys: () => [...userQueries.user.keys, 'user-settings'] as const,
    queryFn: () => axios().get<UserSettings>('/chat/user/settings/'),
  },
  characters: {
    keys: (scope: string) =>
      [...userQueries.user.keys, 'characters', scope] as const,
    queryFn: (scope: 'user' | '') =>
      axios().get<{ characters: Character[] }>(
        `/chat/characters/${scope ? `?scope=${scope}` : ''}`,
      ),
  },
  public: {
    keys: (username: string) => [...userQueries.user.keys, 'public', username],
  },
};

export const authQueries = {
  session: {
    keys: () => ['session'] as const,
  },
  charUser: {
    keys: () => ['charUser'] as const,
    queryFn: () => axios().get<{ user: Participant }>('/chat/user/'),
  },
};

export const voiceQueries = {
  voice: {
    keys: ['voice'] as const,
  },
  userVoices: {
    keys: () => [...voiceQueries.voice.keys, 'user-voices'] as const,
    queryFn: () =>
      axios().get<{ voices: Voice[] }>(
        `${getMultimodalServerURL()}/v1/voices/user`,
      ),
  },
  featuredVoices: {
    keys: () => [...voiceQueries.voice.keys, 'featured-voices'] as const,
    queryFn: () =>
      axios().get<{ voices: Voice[] }>(
        `${getMultimodalServerURL()}/v1/voices/system`,
      ),
  },
  singleVoice: {
    keys: (id: string | undefined | null, useSearch?: boolean | undefined) =>
      [
        ...voiceQueries.voice.keys,
        `single-voice-${id}-${useSearch ? 'search' : ''}`,
      ] as const,
    queryFn: (id: string | undefined | null, useSearch?: boolean) =>
      axios().get<{ voice: Voice }>(
        `${getMultimodalServerURL()}/v1/voices/${id}${
          useSearch ? '?useSearch=true' : ''
        }`,
      ),
  },
  searchVoice: {
    keys: (searchString: string) => ['search-voices', searchString] as const,
    queryFn: (searchString: string) =>
      axios().get<{ voices: Voice[] }>(
        `${getMultimodalServerURL()}/v1/voices/search?query=${encodeURIComponent(
          searchString,
        )}`,
      ),
  },
};
