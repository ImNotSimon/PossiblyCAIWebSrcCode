import { Participant } from './app-api';
import { Turn, TypingTurn } from '../chatManager/chatServiceTypes';

export interface LocalNotification {
  id: string;
  title: string | undefined;
  body: string | undefined;
  external_id: string | undefined;
}

export interface DeeplinkPayload {
  screen: string;
  external_id?: string | undefined;
  username?: string | undefined;
}

// ViewChatMessage is either Turn or TypingTurn with some extra props.
export type ViewChatMessage = (Turn | TypingTurn) & {
  clientSystemMessage?: ClientSystemMessage;
  primaryCandidate?: number;
  isLastAiMessage?: boolean;
  isLastUserMessage?: boolean;
  isGreetingMessage?: boolean;
}

export interface ClientSystemMessage {
  message: string;
  messageType: ClientSystemMessageEnum;
  payload?: string;
}

export enum ClientSystemMessageEnum {
  intro_message,
  creator_attribution,
  context_reset,
}

export interface ExperimentationFactoryInitParameters {
  user?: Participant;
  initCompletionCallback?: () => void;
}

export enum OnboardingFlags {
  chatOnboarding = 0,
  web = 1,
  iOS = 2,
  android = 3,
  /*
  ...
  00, 7: onboarding / info
  08, 16: settings
  17, 31: reserved
  ...
  */
  earlyAccess = 8,
  neoOptIn = 30,
  specialFlag = 31,
}

export enum AppRatingEvent {
  sendMessage = 10, // 100 before rating
  swipeCandidate = 5, // 200 before rating
  rateMessage4Stars = 100, // 10 before rating
  chatError = -5000, // 500 message recovery
  filterError = -100000, // we pretty much never want these guys, 10k message recover y
  waitingRoom = -1000, // 100 message recovery, unused
}

export enum UserDataActionStatus {
  PENDING = 'PENDING',
  COMPLETED = 'COMPLETED',
}

export enum PostVisibility {
  PRIVATE = 'PRIVATE',
  PUBLIC = 'PUBLIC',
}

export interface PostMessageCandidate {
  src: string;
  src__is_human: boolean;
  src__name: string;
  src__user__username: string;
  src__user__account__avatar_file_name: string;
  src__character__avatar_file_name: string;
  src__character__external_id: string;
  responsible_user__username: string;
  text: string;
  image_rel_path: string;
  base_candidate_id?: string;
}

export interface PostMessageData {
  chat: {
    visibility: PostVisibility;
    created: string;
    poster_username: string;
    poster_avatar_file_name: string;
    title: string;
    character__external_ids: string[];
  };
  messages: PostMessageCandidate[];
}
export interface PostData {
  chat_id: string;
  blob_url: string;
  chat_public_link_id: string;
  create_time: string;
  last_update_time: string;
  creator_id: string;
  start_turn_id: string;
  end_turn_id: string;
  state: string;
}

export enum CharacterVisibility {
  PUBLIC = 'PUBLIC',
  UNLISTED = 'UNLISTED',
  PRIVATE = 'PRIVATE',
}
