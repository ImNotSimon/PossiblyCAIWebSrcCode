import { useRef } from 'react';
import {
  CreateAnnotationResponse,
  TurnKey,
} from '../../chatManager/chatServiceTypes';
import { neoAPI } from '../../chatManager/neoAPI';
import { useMutation } from './setup';
import { axios } from '../../lib/axios';
import { getApiURL } from '../../lib/axiosConstants';

export const useAnnotations = (turn_key: TurnKey, candidate_id: string) => {
  const notationIds = useRef<{ [key: string]: string }>({});

  const addAnnotationMutation = useMutation(
    async (annotation_type: string) => {
      const resp = await neoAPI.createAnnotation(turn_key, candidate_id, {
        annotation_type: annotation_type,
        annotation_value: 1,
      });
      return resp?.data;
    },
    {
      onSuccess: (response: CreateAnnotationResponse | undefined) => {
        if (response) {
          notationIds.current[response.annotation.annotation_type] =
            response.annotation.annotation_id;
        }
      },
    },
  );

  const removeAnnotation = useMutation(
    async (annotation_type: string) => {
      if (notationIds.current[annotation_type]) {
        await neoAPI.removeAnnotation(
          turn_key,
          candidate_id,
          notationIds.current[annotation_type],
        );
        return annotation_type;
      }

      return undefined;
    },
    {
      onSuccess: (annotation_type: string | undefined) => {
        if (annotation_type) {
          delete notationIds.current[annotation_type];
        }
      },
    },
  );

  return {
    addAnnotationMutation: addAnnotationMutation.mutate,
    removeAnnotation: removeAnnotation.mutate,
  };
};

interface UpdateMessagePinRequest {
  turnKey: TurnKey;
  isPinned: boolean;
}

export const useUpdateMessagePin = () => {
  return useMutation(async ({ turnKey, isPinned }: UpdateMessagePinRequest) => {
    const response = await axios()({
      baseURL: getApiURL(),
      method: 'post',
      url: '/turn/pin',
      data: {
        turn_key: turnKey,
        is_pinned: isPinned,
      },
    });
    return response.data;
  });
};
