import { RoomUpdates } from '../types/roomTypes';
import { FeedbackLabel, Turn, TurnKey } from './chatServiceTypes';

export type ChatUpdateCallback = (
  message: Turn[],
  primaryCandidateMap: Record<string, number>,
) => void;

export enum ChatEventEnum {
  messages,
  error,
  filter,
  abort,
  receive_fail,
  message_finished,
  message_edited,
  websocket_status,
  websocket_error,
  unrecoverable_error,
  updated,
  deleted,
  state_update,
}

export type ChatEventCallback<T> = (
  eventType: ChatEventEnum,
  payload?: T,
) => void;

export enum ChatInstanceStatusEnum {
  none = 'none', // none
  sending = 'sending', // sending message
  fetchingHistory = 'fetchingHistory', // getting/creating history
  fetchMessages = 'fetchMessages', // getting message history
  cancelling = 'cancelling', // cancelling current in flight message
  dead = 'dead', // dead
}

export interface ChatEventErrorPayload {
  message: string;
  uuid: string | undefined;
  external_id: string;
}

export interface ChatEventWebsocketErrorPayload {
  external_id: string;
  comment: string;
  error_code: string;
  sub_code: string;
  event_time: number;
}

export interface ChatEventUnrecoverableErrorPayload {
  external_id: string;
  comment: string;
  event_time: number;
}

export interface ChatEventWebsocketStatusPayload {
  status: WebsocketStatus;
  external_id: string;
}

export interface ChatEventMessageFinalizedPayload {
  uuid: string;
  participant_name: string | undefined;
  messageText: string | undefined;
  external_id: string | undefined;
}

export interface ChatEventUpdatedPayload {
  updates: RoomUpdates;
}

export interface ChatEventMessagePayload {
  messages: Turn[];
}

export interface ChatEventMessageEditedPayload {
  turnId: string;
  editedIndex: number;
}

export const DUMMY_MSG = 'dummy_msg';
export const USR_MSG = 'user_msg';
export const TYPING_MSG = 'typing_msg';

export enum ChatServiceType {
  Legacy = 'legacy',
  Neo = 'neo',
  Room = 'room',
}

export enum WebsocketStatus {
  open = 'open',
  closed = 'closed',
  error = 'error',
  reconnecting = 'reconnecting',
}

export type PublishType =
  | 'create_and_generate'
  | 'create'
  | 'generate'
  | 'generate_candidate'
  | 'stage_feedback_label'
  | 'abort'
  | 'legacy'
  | 'smart_turn';

export type PublishCreateAndGenerate = {
  type: 'create_and_generate';
  message: string;
  primaryCandidateId?: string;
  ttsEnabled?: boolean;
};

// Processing indicator is a type of state update that is specific to smart reply.
export type StateUpdateType = 'typing' | 'processing';

export type PublishStateUpdate = {
  type: 'state_update';
  updateType: StateUpdateType;
  author: string;
  participant: string;
  participantName: string;
  isHuman: boolean;
  participantAvatar?: string;
};

export type SmartReplyType = 'CHARACTERS' | 'ALL';

export type PublishCreate = {
  type: 'create';
  message: string;
  context_reset?: boolean;
  smart_reply?: SmartReplyType;
};

export type PublishGenerate = {
  type: 'generate';
  characterId: string;
  characterName: string;
  ttsEnabled?: boolean;
};

export type PublishSmartGenerate = {
  type: 'smart_turn';
  user_name: string;
  smart_reply: SmartReplyType;
};

export type PublishGenerateCandidate = {
  type: 'generate_candidate';
  ttsEnabled?: boolean;
};

export type PublishGenerateRoomCandidate = {
  type: 'generate_room_candidate';
  characterId: string;
  turnId: string;
};

export type PublishStageFeedbackLabel = {
  type: 'stage_feedback_label';
  feedbackLabel: FeedbackLabel;
  addOrRemove: 0 | 1;
};

export type PublishEditTurnCandidate = {
  type: 'edit_turn_candidate';
  turnKey: TurnKey;
  candidateId: string;
  newRawContent: string;
};

export type PublicSetTurnPin = {
  type: 'set_turn_pin';
  turnKey: TurnKey;
  isPinned: boolean;
};

export type PublishAbort = {
  type: 'abort';
};

export type PublishLegacy = {
  type: 'legacy';
  messageText: string | undefined;
  generatingCandidates: boolean;
  primaryCandidateId?: string;
  retryLastUserMsg?: boolean;
  abortCurrentMsg?: boolean;
};

export type PublishCommand =
  | PublishCreateAndGenerate
  | PublishStateUpdate
  | PublishCreate
  | PublishGenerate
  | PublishGenerateCandidate
  | PublishGenerateRoomCandidate
  | PublishStageFeedbackLabel
  | PublishEditTurnCandidate
  | PublicSetTurnPin
  | PublishAbort
  | PublishLegacy
  | PublishSmartGenerate;
