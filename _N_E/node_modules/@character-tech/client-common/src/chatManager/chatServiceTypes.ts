import { StateUpdateType } from './chatManagerTypes';

export interface NeoChatHistoryResponseData {
  meta: {
    next_token: string;
  };
  turns: Turn[];
}

export interface NeoRecentChatResponse {
  chat: Chat;
}

export interface NeoRecentChatsResponse {
  chats: Chat[];
}

// States returned by the server
type ServerTurnState = 'STATE_UNSPECIFIED' | 'STATE_OK' | 'STATE_REMOVED';

// States used locally only
type ClientTurnState = 'STATE_INFLIGHT' | 'STATE_ERROR';

export type TurnState = ServerTurnState | ClientTurnState;

export interface Turn {
  turn_key: TurnKey;
  create_time: string;
  last_update_time: string;
  state: TurnState;
  author: Author;
  candidates: Candidate[];
  primary_candidate_id: string;
  context_reset?: boolean;
  is_pinned?: boolean;
}

export interface TypingTurn extends Turn {
  // Integer ID of the timeout that will be used to clear the typing indicator.
  errorTimeout: number;
  // Type of typing turn.
  type: StateUpdateType;
}

export interface Author {
  author_id: string;
  is_human: boolean;
  name: string;
  avatar_url?: string;
}

export interface Candidate {
  candidate_id: string;
  create_time: string;
  raw_content?: string;
  base_candidate_id?: string;
  // client added fields
  force_signin?: boolean;
  is_final?: boolean;
  tti_image_rel_path?: string;
  error?: string;
  fresh?: boolean; // added this client session
  request_id?: string; // added this client session
  safety_truncated?: boolean;
  debug_info?: string;
}

export interface TurnKey {
  chat_id: string;
  turn_id: string;
}

export interface Chat {
  chat_id: string;
  create_time: string;
  creator_id: string;
  character_id: string;

  state: NeoChatState;

  type: NeoChatType;
  visibility: NeoChatVisibility;
  character_visibility: 'PUBLIC' | 'PRIVATE' | 'UNLISTED';
  character_name?: string;
  character_avatar_uri?: string;
  preview_turns?: Turn[];
  last_interaction?: string;
  unread_count?: number;
}

export enum NeoReceiveSocketCommands {
  add_turn = 'add_turn',
  update_turn = 'update_turn',
  create_chat_response = 'create_chat_response',
  neo_error = 'neo_error',
  remove_turns_response = 'remove_turns_response',
  remove_turn = 'remove_turn',
  update_mu_room_response = 'update_mu_room_response',
  delete_mu_room = 'delete_mu_room',
  mu_state_update = 'state_update',
  ok_response = 'ok',
}

export const NeoErrorCodes = {
  MultiGeneration: {
    errorCode: 429,
    subCode: 1,
  },
  TooManyPins: {
    errorCode: 429,
    subCode: 16,
  },
};

export enum NeoSendSocketCommands {
  create_chat = 'create_chat',
  create_turn = 'create_turn',
  create_and_generate_turn = 'create_and_generate_turn',
  generate_turn = 'generate_turn',
  generate_turn_candidate = 'generate_turn_candidate',
  remove_turns = 'remove_turns',
  remove_turn = 'remove_turn',
  set_turn_pin = 'set_turn_pin',
  abort_generation = 'abort_generation',
  ping = 'ping',
  edit_turn_candidate = 'edit_turn_candidate',
  mu_state_update = 'state_update',
  update_primary_candidate = 'update_primary_candidate',
}

export enum NeoChatVisibility {
  private = 'VISIBILITY_PRIVATE',
  public = 'VISIBILITY_PUBLIC',
  unlisted = 'VISIBILITY_UNLISTED',
}

export enum NeoChatType {
  unspecified = 'TYPE_UNSPECIFIED',
  direct = 'TYPE_ONE_ON_ONE',
  room = 'TYPE_ROOM',
  multiuser = 'TYPE_MU_ROOM',
}

export enum NeoChatState {
  unspecified = 'STATE_UNSPECIFIED',
  active = 'STATE_ACTIVE',
  locked = 'STATE_LOCKED',
  removed = 'STATE_REMOVED',
}

// Generated by https://quicktype.io

export interface AddTurnPayload {
  command: string;
  request_id: string;
  turn: Turn;
}

export interface WebSocketMessageEvent extends Event {
  data?: any;
}

export interface WebSocketErrorEvent extends Event {
  message: string;
}

export interface WebSocketCloseEvent extends Event {
  code?: number | undefined;
  reason?: string | undefined;
  message?: string | undefined;
}

export interface Annotation {
  annotation_id: string;
  last_update_time: string;
  annotator: Author;
  annotation_type: string;
  annotation_value: number | string;
  annotation_raw_content: string;
  justification: string;
  removed: boolean;
}

export interface CreateAnnotationResponse {
  annotation: {
    annotation_id: string;
    annotation_type: string;
    annotation_value: string;
  };
}

export enum ChatTypesEnum {
  TYPE_MU_ROOM = 'TYPE_MU_ROOM',
}

export enum FeedbackLabel {
  boring = 'boring',
  not_boring = 'not_boring',
  inaccurate = 'inaccurate',
  not_inaccurate = 'not_inaccurate',
  repetitive = 'repetitive',
  not_repetitive = 'not_repetitive',
  out_of_character = 'out_of_character',
  not_out_of_character = 'not_out_of_character',
  bad_memory = 'bad_memory',
  not_bad_memory = 'not_bad_memory',
  long = 'long',
  not_long = 'not_long',
  short = 'short',
  not_short = 'not_short',
  ends_chat_early = 'ends_chat_early',
  not_ends_chat_early = 'not_ends_chat_early',
  funny = 'funny',
  not_funny = 'not_funny',
  interesting = 'interesting',
  not_interesting = 'not_interesting',
  helpful = 'helpful',
  not_helpful = 'not_helpful',
}
