import { UserLocation } from '../types/moderation';
import { IN_EEA_KEY, IN_EU_KEY, IN_UK_KEY } from './constants';

export const getLocal = (keyName: string) => {
  const itemStr = localStorage.getItem(keyName);
  if (!itemStr) {
    return null;
  }
  try {
    const item = JSON.parse(itemStr);
    const now = new Date();
    if (now.getTime() > item.ttl) {
      localStorage.removeItem(keyName);
      return null;
    }
    return item.value;
  } catch (e) {
    return null;
  }
};

export const setLocal = (keyName: string, keyValue: string, ttl: number) => {
  const data = {
    value: keyValue, // store the value within this object
    ttl: ttl ? Date.now() + ttl * 1000 : undefined, // store the TTL (time to live)
  };

  localStorage.setItem(keyName, JSON.stringify(data));
};

export const removeLocal = (keyName: string) => {
  localStorage.removeItem(keyName);
};

/**
 * Returns the cached user's location data if it exists.
 */
export const getUserLocationData = (): UserLocation | undefined => {
  if (typeof localStorage === 'undefined') return;

  const cachedResult = {} as UserLocation;
  let localValue;

  if (IN_EU_KEY in localStorage) {
    localValue = getLocal(IN_EU_KEY);

    if (localValue != null) cachedResult.inEU = JSON.parse(localValue);
  }

  if (IN_EEA_KEY in localStorage) {
    localValue = getLocal(IN_EEA_KEY);

    if (localValue != null) cachedResult.inEEA = JSON.parse(localValue);
  }

  if (IN_UK_KEY in localStorage) {
    localValue = getLocal(IN_UK_KEY);

    if (localValue != null) cachedResult.inUK = JSON.parse(localValue);
  }

  if (Object.keys(cachedResult).length > 0) return cachedResult;
};

/**
 * Saves the user's location data in local storage.
 */
export const saveUserLocationData = (
  userLocation: UserLocation,
  ttl: number,
): void => {
  if (typeof localStorage === 'undefined') return;

  if (userLocation.inEU != null) {
    setLocal(IN_EU_KEY, userLocation.inEU.toString(), ttl);
  }

  if (userLocation.inEEA != null) {
    setLocal(IN_EEA_KEY, userLocation.inEEA.toString(), ttl);
  }

  if (userLocation.inUK != null) {
    setLocal(IN_UK_KEY, userLocation.inUK.toString(), ttl);
  }
};
