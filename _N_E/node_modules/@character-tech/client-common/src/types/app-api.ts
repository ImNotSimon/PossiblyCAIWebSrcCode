import { Chat } from '../chatManager/chatServiceTypes';

export interface Participant {
  avatar_file_name?: string;
  user?: User;
  is_human?: boolean;
  name: string;
  email?: string;
  num_interactions?: number;
  hidden_characters?: string[];
  blocked_users?: string[];
  suspended_until?: string;
  needs_to_acknowledge_policy?: boolean;
  bio?: string;
}

export interface Subscription {
  type: 'NONE' | 'PLUS' | 'ELITE';
  // Status is unused for now, always reporting INCOMPLETE
  status:
    | 'INCOMPLETE'
    | 'INCOMPLETE_EXPIRED'
    | 'TRIALING'
    | 'ACTIVE'
    | 'PAST_DUE'
    | 'CANCELED'
    | 'UNPAID';
  expires_at: string;
}

export interface User {
  username: string;
  id: number;
  first_name: string;
  account: Account | null;
  is_staff?: boolean;
  subscription?: Subscription;
}

export interface Account {
  name: string;
  avatar_type: string;
  onboarding_complete: boolean;
  avatar_file_name: string;
  mobile_onboarding_complete: number | null;
}

export interface Character {
  external_id: string;
  title: string;
  name: string;
  visibility: string;
  copyable: boolean;
  greeting: string;
  description: string;
  identifier: string;
  avatar_file_name: string;
  songs: any[];
  img_gen_enabled: boolean;
  base_img_prompt: string;
  img_prompt_regex: string;
  strip_img_prompt_from_msg: boolean;
  user__username: string;
  participant__name: string;
  participant__num_interactions: number;
  participant__user__username: string;
  voice_id: string;
  default_voice_id?: string;
  usage: string;
  max_last_interaction?: string;
  starter_prompts?: CharacterStarterPrompts;
  archived?: boolean;
  upvotes?: number;
}

export interface CharacterStarterPrompts {
  phrases?: string[];
}

export interface CharacterCategory {
  name: string;
  description: string;
  priority: number;
}

export interface CharacterDetailed extends Character {
  categories: CharacterCategory[];
  definition: string;
  avatar_rel_path: string; // TODO: check if deprecated?
  num_interactions: number;
}

export interface CompleteSignupParams {
  username: string;
  date_of_birth: string;
  userInEEA: boolean;
  userInUK: boolean;
  date_of_birth_collected: boolean;
  acknowledgement: boolean;
  avatar_type?: string;
  avatar_file_name?: string;
}

export interface ChatHistoryResponse {
  title: string;
  participants: Participant[];
  external_id: string;
  created: string;
  last_interaction: null;
  type: string;
  description: string;
  speech?: any | null;
  status?: string;
  next_page: number;
  has_more?: boolean;
  messages?: Message[];
  room_img_gen_enabled?: boolean;
  avatars?: Avatar[];
  //TODO: mobile client added field, should be abstracted into own value
  isNewHistory?: boolean;
}

export interface CharacterHistory {
  created: string;
  external_id: string;
  last_interaction: string;
  msgs: Message[];
}
export interface CharacterChatHistoriesResponse {
  histories: CharacterHistory[];
}

export interface HideCharacterChatResponse {
  status: string;
}

export interface Avatar {
  name: string;
  character__avatar_file_name: null | string;
  user__account__avatar_file_name: null | string;
}

export interface Message {
  deleted: boolean;
  id: number;
  image_prompt_text: string;
  image_rel_path: string;
  is_alternative: boolean;
  responsible_user__username: string;
  src__character__avatar_file_name: string;
  src__is_human: boolean;
  src__name: string;
  src__user__username: string;
  src_char: SrcChar;
  text: string;
  badge_reason?: string;
  error?: string; // client added
  uuid: string; // websocket field
  inProgress?: boolean; // client field
  clientUUID: string; // client field
  force_signin?: boolean; // client added
  fresh?: boolean; // client added field
}

export interface ChatMessageHistoryResponse {
  messages: Message[];
  has_more: boolean;
  next_page: number;
  status?: string;
}

export interface EditUserFormData {
  username?: string;
  name?: string;
  bio?: string;
  avatar_type?: string;
  avatar_rel_path?: string;
}

export type Following = string[];
export type Followers = string[];

export type CharactersByCategoryResponse = {
  characters_by_curated_category: Record<string, Character[]>;
};

export type CreateCharacterResponse = {
  status: string;
  character: CharacterDetailed;
};

export type UpdateCharacterResponse = {
  status: string;
  character: CharacterDetailed;
};

export interface ChatStreamResponse {
  replies: Reply[];
  src_char: SrcChar;
  is_final_chunk: boolean;
  last_user_msg_id: number;
}

export interface Reply {
  text: string;
  id?: number;
}

export interface SrcChar {
  participant?: Participant;
  avatar_file_name: string;
}

export interface CategoryResponseItem {
  name: string;
  description: string;
}

export interface CategoryResponse {
  categories: CategoryResponseItem[];
}
export interface Category {
  label: string;
  value: string;
}

export type CharacterOption = {
  label: string;
  value: string;
};
export interface RoomFormData {
  characters: CharacterOption[];
  name: string;
  topic: string;
  visibility: string;
}

export interface Room {
  external_id: string;
}

export interface CreateRoomResponse {
  room: Room;
}

export interface Author {
  participant_id: string;
  is_human: boolean;
  name: string;
}

export interface NeoError {
  error_code: number; // TODO: consider it to be a string
  comment?: string;
}

export interface TurnFilter {
  candidate_filter:
    | 'PRIMARY_CANDIDATES_ONLY'
    | 'LAST_TURN_ALL_CANDIDATES' // default
    | 'ALL_TURNS_ALL_CANDIDATES';
  start_time?: string; // represents datetime
  end_time?: string; //represent datetime
  max_count?: number;
}

export enum SubscriptionType {
  NONE = 'NONE',
  PLUS = 'PLUS',
  ELITE = 'ELITE',
}

export interface PublicUser {
  bio: string;
  characters: Character[];
  name: string;
  num_followers: number;
  num_following: number;
  username: string;
  avatar_file_name: string;
  subscription_type?: SubscriptionType;
}

export interface RecentChatShunt {
  id: string;
  character_id: string;
  name: string;
  avatar_file_name: string | undefined;
  date: string;
  isNeo: boolean;
  character_visibility: 'PRIVATE' | 'UNLISTED' | 'PUBLIC';
  unread_count?: number;
}

export interface CharacterHistoryShunt extends Partial<Chat> {
  isNeo: boolean;
}

export interface NotificationRegisterRequest {
  device_id: string;
  provider?: 'fcm' | 'hms' | 'apns';
  token: string;
  platform?: 'android' | 'ios' | 'web';
}

export interface NotificationModeUpdate {
  mode:
    | 'PUSH_NOTIFICATION_MODE_ON'
    | 'PUSH_NOTIFICATION_MODE_OFF'
    | 'PUSH_NOTIFICATION_MODE_MENTION_ONLY';
}

export type ProactiveDmOverrides = {
  [characterId: string]: 'off' | 'on' | undefined;
};

export interface UserSettings {
  voiceOverrides?: { [characterId: string]: string | undefined };
  darkMode?: boolean;
  voiceModelServerAddress?: string;
  default_persona_id?: string;
  personaOverrides?: { [characterId: string]: string | undefined };
  proactiveDmOptedOut?: boolean;
  proactiveDmOverrides?: ProactiveDmOverrides;
}

export interface SearchedUser {
  username: string;
  account__avatar_file_name: string;
  account__bio?: string;
  character_info?: {
    num_characters: number; // number of public characters
    num_interactions: number;
    top_1_char: { character_name: string; interactions: number };
    top_2_char: { character_name: string; interactions: number };
  };
}

export interface VoicePreview {
  voice: Voice;
  loadingVoice: boolean;
  playingVoice: boolean;
  pausedVoice: boolean;
}

export interface Voice {
  id: string;
  name: string;
  description: string;
  gender: 'male' | 'female' | 'neutral';
  visibility: 'public' | 'private';
  creatorInfo: VoiceCreatorInfo;
  audioSourceType: 'microphone' | 'file';
  previewText: string;
  previewAudioURI: string;
  backendProvider: string;
}

export interface VoiceCreatorInfo {
  id: string;
  source: string;
  username: string;
}
