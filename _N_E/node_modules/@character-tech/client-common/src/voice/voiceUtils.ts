import { AxiosResponse } from 'axios';
import { Character, Participant, UserSettings, Voice } from '../types/app-api';

export const isVoiceEnabledForCharacter = (
  character: Character | undefined,
  userSettings: UserSettings | undefined,
) => {
  if (!character || !userSettings) {
    return false;
  }

  const voiceOverride = userSettings?.voiceOverrides?.[character.external_id];
  const defaultVoiceId = character.default_voice_id;
  return !!(voiceOverride || defaultVoiceId);
};

export const getVoiceIdForCharacter = (
  character: Character | undefined,
  userSettings: UserSettings | undefined,
) => {
  if (!character || !userSettings) {
    return undefined;
  }

  const voiceOverride = userSettings?.voiceOverrides?.[character.external_id];
  const defaultVoiceId = character.default_voice_id;
  return voiceOverride || defaultVoiceId;
};

export const deduplicateVoices = (voices: Voice[]) => {
  const uniqueIds = new Set();
  return voices.filter(v => {
    if (!uniqueIds.has(v.id)) {
      uniqueIds.add(v.id);
      return true;
    }
    return false;
  });
};

export const checkShouldRemoveVoiceOverride = (
  response: AxiosResponse | undefined,
): boolean => {
  if (!response) {
    return false;
  }

  // 401: Unauthorized, 403: Deleted, 404: Not Found, 410: Content Filter
  return [401, 403, 404, 410].includes(response?.status);
};

export const isUserCreatedVoice = (
  voice?: Voice,
  user?: Participant | undefined | null,
) => user && voice?.creatorInfo.id === String(user?.user?.id);
