import { useQuery } from './setup';
import { useMemo } from 'react';
import { useFilterHiddenCharacters } from './character';
import { discoveryQueries } from './baseQueries';

// TODO @Sophia to clean up experimentation
const V1_ENDPOINT_STALE_TIME = 15 * 60 * 1000; // backend refreshes every 15 minutes

export const useFeaturedCharacters = (filterHidden?: boolean) => {
  const filterHiddenCharacters = useFilterHiddenCharacters();
  const query = useQuery({
    queryKey: discoveryQueries.featured.keys(),
    queryFn: () => discoveryQueries.featured.queryFn(),
    staleTime: V1_ENDPOINT_STALE_TIME,
  });
  const featuredCharacters = useMemo(() => {
    return filterHidden
      ? filterHiddenCharacters(query.data?.data.characters)
      : query.data?.data.characters;
  }, [query.data, filterHidden, filterHiddenCharacters]);
  return {
    ...query,
    featuredCharacters,
  };
};

export const useRecentCharacters = (
  neoEnabled: boolean,
  filterHidden?: boolean,
) => {
  const filterHiddenCharacterChats = useFilterHiddenCharacters();
  const query = useQuery({
    queryKey: discoveryQueries.recent.keys(neoEnabled),
    queryFn: () => discoveryQueries.recent.queryFn(neoEnabled),
    staleTime: Infinity, // App manually refreshes this data for now, we may want to change this
  });
  const recentCharacters = useMemo(() => {
    return filterHidden ? filterHiddenCharacterChats(query.data) : query.data;
  }, [query.data, filterHidden, filterHiddenCharacterChats]);
  return {
    ...query,
    recentCharacters,
  };
};

export const usePublicCharacters = (filterHidden?: boolean) => {
  const filterHiddenCharacters = useFilterHiddenCharacters();
  const query = useQuery({
    queryKey: discoveryQueries.public.keys(),
    queryFn: () => discoveryQueries.public.queryFn(),
    staleTime: Infinity,
  });
  const publicCharacters = useMemo(() => {
    return filterHidden
      ? filterHiddenCharacters(query.data?.data.characters)
      : query.data?.data.characters;
  }, [query.data, filterHidden, filterHiddenCharacters]);
  return {
    ...query,
    publicCharacters,
  };
};

export const useTrendingCharacters = (filterHidden?: boolean) => {
  const filterHiddenCharacters = useFilterHiddenCharacters();
  const query = useQuery({
    queryKey: discoveryQueries.trending.keys(),
    queryFn: () => discoveryQueries.trending.queryFn(),
    staleTime: V1_ENDPOINT_STALE_TIME,
  });
  const trendingCharacters = useMemo(() => {
    return filterHidden
      ? filterHiddenCharacters(query.data?.data.characters)
      : query.data?.data.characters;
  }, [query.data, filterHidden, filterHiddenCharacters]);
  return {
    ...query,
    trendingCharacters,
  };
};

export const useRecommendedCharacters = (filterHidden?: boolean) => {
  const filterHiddenCharacters = useFilterHiddenCharacters();
  const query = useQuery({
    queryKey: discoveryQueries.recommended.keys(),
    queryFn: async () => discoveryQueries.recommended.queryFn(),
    staleTime: V1_ENDPOINT_STALE_TIME,
  });

  const recommendedCharacters = useMemo(() => {
    return filterHidden
      ? filterHiddenCharacters(query.data?.data.characters)
      : query.data?.data.characters;
  }, [query.data, filterHidden, filterHiddenCharacters]);

  return {
    ...query,
    recommendedCharacters,
  };
};

export const useCharactersByCuratedCategory = (filterHidden?: boolean) => {
  const filterHiddenCharacters = useFilterHiddenCharacters();
  const query = useQuery({
    queryKey: discoveryQueries.curated.keys(),
    queryFn: () => discoveryQueries.curated.queryFn(),
    staleTime: Infinity,
  });

  const { charactersByCategory, categories } = useMemo(() => {
    const charactersByCategory =
      query.data?.data.characters_by_curated_category;

    if (charactersByCategory) {
      const toDelete = ['Famous People', 'Movies & TV', 'Chinese'];
      for (const category of toDelete) {
        delete charactersByCategory[category];
      }
    }

    const categories = charactersByCategory
      ? Object.keys(charactersByCategory)
      : [];

    if (filterHidden && charactersByCategory) {
      for (const category in charactersByCategory) {
        charactersByCategory[category] = filterHiddenCharacters(
          charactersByCategory[category],
        );
      }
    }

    return {
      charactersByCategory,
      categories,
    };
  }, [query.data, filterHidden, filterHiddenCharacters]);
  return {
    ...query,
    charactersByCategory,
    categories,
  };
};

export const useCategories = () => {
  const query = useQuery({
    queryKey: discoveryQueries.categories.keys(),
    queryFn: () => discoveryQueries.categories.queryFn(),
    staleTime: Infinity,
  });
  return {
    ...query,
    categories: query.data?.data.categories,
  };
};
